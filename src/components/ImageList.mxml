<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="components.*"
		 creationComplete="init()"
		 >
	<fx:Metadata>
		[Event(name="startSlideshow", type="flash.events.Event")]
		[Event(name="currentIndexChanged", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import models.Model;
			import models.valueObject.Frame;			
			import mx.events.CollectionEvent;			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			public var model:Model;
			
			[Bindable]
			public var isEmpty:Boolean = true;
			

			// -----------------------------------------------------
			private function init():void {
				frameList.dataProvider.addEventListener(CollectionEvent.COLLECTION_CHANGE, collectionChangedHandler);
				frameList.addEventListener(IndexChangeEvent.CHANGE, indexChangedHandler);				
				focusManager.setFocus(frameList);
				addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);
			}
			
			private function addedToStageHandler(e:Event):void {
				stage.addEventListener(KeyboardEvent.KEY_UP, keyboardEventHandler);
			}
			
			// -----------------------------------------------------
			private function collectionChangedHandler(e:CollectionEvent):void {
				if(frameList.dataProvider.length > 0)
					isEmpty = false;
				else
					isEmpty = true;
				
				if(e.location >= 0) {
					frameList.selectedIndex = e.location;
					model.nextIndex = frameList.selectedIndex + 1;
					frameList.ensureIndexIsVisible(frameList.selectedIndex - 1);
					indexChangedHandler();
				}
			}
			
			// -----------------------------------------------------			
			private function keyboardEventHandler(e:KeyboardEvent):void {
				// DEL or BACKSPACE
				if(e.keyCode == 46 || e.keyCode == 8) {
					if(frameList.selectedItems)	{						
						model.removeFrame(frameList);
					}
				}				
				// RIGHT
				else if(e.keyCode == 39) {
					model.nextFrame();
					updateFrame();
					dispatchEvent(new Event("currentIndexChanged"));
				}				
				// LEFT Arrow
				else if(e.keyCode == 37) {
					model.previousFrame();
					updateFrame();
					dispatchEvent(new Event("currentIndexChanged"));
				}
			}
			
			// -----------------------------------------------------
			private function setCurrentIndex():void {
				model.currentIndex = frameList.selectedIndex;		
				dispatchEvent(new Event("currentIndexChanged"));
			}
			
			// -----------------------------------------------------
			private function selectAllItemsHandler():void {
				var tmp:Vector.<int> = new Vector.<int>;
				for(var i:int=0;i<frameList.dataProvider.length;i++)
					tmp.push(i);
				frameList.selectedIndices = tmp;
			}
			
			// -----------------------------------------------------
			public function updateFrame():void {
				frameList.selectedIndex = model.currentIndex;
				frameList.ensureIndexIsVisible(frameList.selectedIndex);
			}

			// -----------------------------------------------------
			private function indexChangedHandler(e:Event = null):void {
				model.nextIndex = frameList.selectedIndex + 1;
			}		
			
		]]>
	</fx:Script>

	<s:Group width="100%" height="100%">
		<s:VGroup width="100%" gap="0" height="100%">
				
			<s:List id="frameList"
					creationComplete="init();"
					itemRenderer="components.ImageListItemRenderer"
					borderVisible="{!isEmpty}"
					keyUp="keyboardEventHandler(event)"
					selectAll="selectAllItemsHandler();"
					requireSelection="true"
					dragComplete="indexChangedHandler()"
					dropEnabled="true"
					dragEnabled="true"
					dragMoveEnabled="true"
					arrowKeysWrapFocus="true"
					allowMultipleSelection="true"				
					dataProvider="{model.frames}"
					doubleClickEnabled="true"
					doubleClick="dispatchEvent(new Event('startSlideshow'))"	
					click="setCurrentIndex()"
					>
				
				<s:layout>
					<s:HorizontalLayout clipAndEnableScrolling="true" />
				</s:layout>
			</s:List>
			
		</s:VGroup>
	</s:Group>
</s:Group>
